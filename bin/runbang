#!/bin/sh
#
# $Id$
#
# A script to invoke the Bang! server and email the generated logs when it
# eventually exits.

NAME=bang
DESC="Bang game server"

BANG_HOME=`dirname $0 | sed s:/bin$::`
BANG_USER=www-data
HOSTNAME=`hostname`

LOG_EMAIL=nightly-logs@threerings.net
LOGLEVEL=info
SERVER_MEMORY=384M

# Override settings with those from BANG_HOME/server.conf
if [ -f $BANG_HOME/server.conf ]; then
    . $BANG_HOME/server.conf
else
    echo "Can't load $BANG_HOME/server.conf; can't run server."
    exit 255
fi

# Make sure our nodename was properly specified (we have to do this after
# reading server.conf because now server.conf contains a default NODE
# specification). Also make sure the server pid file was supplied.
if [ -z "$1" -o -z "$2" ]; then
    echo "Usage: $0 nodename pid_file"
    exit 255
fi
NODE=$1
LOGFILE=$BANG_HOME/log/stdout-$NODE.log
PIDFILE=$2

# Make sure we're running as the correct user
WHOAMI=`whoami`
if [ "$WHOAMI" != "$BANG_USER" ]; then
    echo "This script must be run as $BANG_USER."
    exit 255
fi

CLASS=com.threerings.bang.server.BangServer
JAVA_ARGS="-server -mx$SERVER_MEMORY \
    -Dresource_dir=$BANG_HOME/dist/rsrc \
    -Dno_unpack_resources=true \
    -Dhostname=$HOSTNAME \
    -Dis_node=true \
    -Dnode=$NODE \
    -Drsrc_cache_dir=/tmp -Dlog_level=$LOGLEVEL"

#    -XX:+UseParNewGC -XX:+UseAdaptiveSizePolicy -XX:MaxNewSize=64m \
#    -XX:+PrintGCDetails -XX:+PrintTenuringDistribution -XX:+PrintHeapAtGC \

umask 002
ulimit -d 524288

# Some temporary business for multiprocessor FreeBSD machines
NEEDS_MEMBAR=`java -fullversion 2>&1 | grep diablo`
if [ ! -z "$NEEDS_MEMBAR" ]; then
     JAVA_ARGS="$JAVA_ARGS -XX:+UseMembar"
     export ANT_OPTS="-XX:+UseMembar"
fi

# Create the logfile
touch $LOGFILE

cd $BANG_HOME

# Reload the board database from the source files (do this before we set up our classpath)
if [ $NODE = "frontier_town" ]; then
    if [ ! -z "`find $BANG_HOME/rsrc/boards -name \*.board`" ] ; then
        echo "Rebuilding board database:" >>$LOGFILE
        ant -f etc/build-boards.xml boards >>$LOGFILE 2>&1
        # delete the board files; they're in the database now and need not be
        # reloaded until the next release and we need to prevent stale boards
        # from lingering on the production servers
        if [ $? == 0 ]; then
            find rsrc/boards -name \*.board | xargs rm
        fi
    fi
fi

# Add the deployment directory (so that $BANG_HOME/rsrc is accessible) and all
# necessary jar files to the CLASSPATH
CLASSPATH="$BANG_HOME/dist"
for JAR in $BANG_HOME/dist/lib/*.jar $BANG_HOME/dist/bang-*.jar; do
    # skip the bang-support jar, it duplicates what's in bang-code
    if [ "$JAR" != "$BANG_HOME/dist/bang-support.jar" ]; then
        CLASSPATH=$CLASSPATH:$JAR
    fi
done
export CLASSPATH

# Set up the LD_LIBRARY_PATH to include our shared libraries
LD_LIBRARY_PATH=$BANG_HOME/dist/lib/`uname -m`-`uname -s`
export LD_LIBRARY_PATH

# Start up the server
echo "Running Bang server:" >>$LOGFILE
echo " Deployment root: $BANG_HOME" >>$LOGFILE
echo "       Java args: $JAVA_ARGS" >>$LOGFILE
echo "    Server class: $CLASS" >>$LOGFILE

java $JAVA_ARGS $CLASS >>$LOGFILE 2>&1 &
PROCESS_PID=$!
echo $PROCESS_PID >$PIDFILE
wait $PROCESS_PID
EXIT_CODE=$?

# Mail out warnings from the logs
FILTLOG=/tmp/bangfiltered.log
cat $LOGFILE | $BANG_HOME/tools/bin/lfilter > $FILTLOG
if [ -s $FILTLOG ]; then
    cat $FILTLOG | $MAIL -s "$HOSTNAME: $BANG_HOME filtered log" $LOG_EMAIL
fi
rm -f $FILTLOG

# Archive the server log
NOW=`date "+%F-%H:%M"`
mv $LOGFILE $LOGFILE.$NOW

# Prune old logs
find $BANG_HOME/log -name 'stdout-$NODE.log*' -a -mtime +60 | xargs rm -f

exit $EXIT_CODE
