#!/usr/bin/perl -w
#
# $Id$
#
# Grinds the Bang daily server log and outputs a summary of various usage
# statistics. This will eventually be replaced with a more sophisticated tool
# that stores this information in a database (perhaps factored out of the
# Yohoho stats processing code).

my $limit = 10;

my %firsttimers;

my %usertime;
my %usersess;
my %userrounds;
my %userearn;

my $tottime = 0;
my $totsess = 0;
my $newtime = 0;
my $newsess = 0;

my %byscen;
my %bytut;
my %byteamsize;

my $totgametime = 0;
my $ratgames = 0;
my $unratgames = 0;

my %games;
my %rounds;
my %time;

my $totearn = 0;
my $newearn = 0;

my %leavers;
my %discons;
my %logoffs;

my $datedir = "";

# grind and process the raw data
while (<>) {
    chomp;
    if (/(\S+) (\S+) log_opened /) {
        $datedir = $1;
    } elsif (/first_timer (\d+) (\S+)/) {
        $firsttimers{$1} = $1;
    } elsif (/session_end (\d+) ctime:(\d+) node:(\S+)/) {
        $usertime{$1} += $2;
        $usersess{$1}++;
        $tottime += $2;
        $totsess++;
        if (defined $firsttimers{$1}) {
            $newtime += $2;
            $newsess++;
        }

    } elsif (/game_ended t:(\d+) (g:SALOON)? s:(\S+) ts:(\d+) r:(\S+) a:(\S+) (.*)/) {
        my $gsecs = $1;
        my $tsize = $4;
        my $rated = $5;
        my $aces = $6;
        my $info = $7;
        my @scens = split(/,/, $3);
        my $rcount = scalar @scens;
        my $rtype = ($rated eq "true") ? "rated" : "unrated";

        my $humans = 0;
        my @pinfos = split(/,/, $info);
        foreach $pinfo (@pinfos) {
            my @bits = split(/:/, $pinfo);
            my $playerid = $bits[0];
            $humans++ unless ($playerid == -2);
        }

        my $tutorial = 0;
        my $type;
        if ($rcount == 1 && length($scens[0]) > 2) {
            $tutorial = 1;
            $type = "tutorial";
        } elsif ($humans > 1) {
            $type = "human";
        } else {
            $type = "tincan";
        }

        $games{$type}++;
        $time{$type} += $gsecs;

        if ($tutorial) {
            foreach $scen (@scens) {
                $bytut{$scen}++;
            }
        } else {
            foreach $scen (@scens) {
                $byscen{$scen}++;
            }
        }

        # these are only recorded for non-tutorial games
        if (!$tutorial) {
            $games{$rtype}++;
            $rounds{$rtype} += $rcount;
            $byteamsize{$tsize} += $rcount;
        }

        foreach $pinfo (@pinfos) {
            my @bits = split(/:/, $pinfo);
            my $playerid = $bits[0];
            next if ($playerid < 0);

            # track stats on who leaves games early (or disconnects)
            if ($bits[1] eq "#") {
                note_leaver(\%leavers, $humans, $tutorial);
            }
            if ($bits[1] eq "!") {
                note_leaver(\%discons, $humans, $tutorial);
            }
            if ($bits[1] eq "*") {
                note_leaver(\%logoffs, $humans, $tutorial);
            }

            # track rounds played and earnings per player
            if ($tutorial) {
                $userrounds{"tutorial"}{$playerid} += $rcount;
            } else {
                $userrounds{"versus"}{$playerid} += $rcount;
                $userrounds{"rated"}{$playerid} += $rcount
                    if ($rtype eq "rated");
                my $earnings = (@bits > 3) ? $bits[3] : 0;
                $userearn{$playerid} += $earnings;
                $totearn += $earnings;
                if (defined $firsttimers{$playerid}) {
                    $newearn += $earnings;
                    $newrounds += $rcount;
                }
            }

            # track total rounds played for all (human) players in all games
            $rounds{$type} += $rcount;
        }

    } elsif (/game_ended t:(\d+) g:PRACTICE s:(\S+) (.*)/) {
        my $gsecs = $1;
        my $unit = $2;
        my $info = $3;
        # TODO: log anything for practice games?

    } elsif (/game_ended t:(\d+) g:BOUNTY bid:(\S+) gid:(\S+) won:(\S+) (.*)/) {
        my $gsecs = $1;
        my $bounty = $2;
        my $game = $3;
        my $info = $5;
        # TODO: log anything for bounty games?

    } elsif (/game_ended t:(\d+) g:TUTORIAL s:(\S+) (.*)/) {
        my $gsecs = $1;
        my $tutorial = $2;
        my $info = $3;
        $games{"tutorial"}++;
        $time{"tutorial"} += $gsecs;
        $bytut{$tutorial}++;
    }
}

printf("Type        Games\n");
printf("vs Humans   %5d\n", safe_get("human", \%games));
printf("vs Tin Cans %5d\n", safe_get("tincan", \%games));
printf("Tutorials   %5d\n", safe_get("tutorial", \%games));
print "\n";

print "Perf stats: http://bang1.banghowdy.com/stats/$datedir/perf.html\n\n";

my $totrounds = safe_get("human", \%rounds) + safe_get("tincan", \%rounds);

# summarize sessions, rounds played, earnings, etc.
my $ucount = keys %usersess;
my $ncount = keys %firsttimers;
my $totmins = $tottime/60;
my $newmins = $newtime/60;
print "Username    Sess.  Minutes /sess  Rounds  Earnings /round\n";
printf("all %6d %6d  %7.0f    %2.0f  %6d  %8d\n",
       $ucount, $totsess, $totmins, safe_div($totmins, $totsess), $totrounds, $totearn);
if ($newsess > 0) {
    printf("noobs %4d %6d  %7.0f    %2.0f  %6d  %8d\n",
           $ncount, $newsess, $newmins, safe_div($newmins, $newsess), $newrounds, $newearn);
}
printf("all  (avg)    %2.1f  %7.0f           %2.1f  %8d   %3.0f\n",
       safe_div($totsess, $ucount), safe_div($totmins, $ucount), safe_div($totrounds, $ucount),
       safe_div($totearn, $ucount), safe_div($totearn, $totrounds));
if ($newsess > 0) {
    printf("noob (avg)    %2.1f  %7.0f           %2.1f  %8d   %3.0f\n",
           safe_div($newsess, $ucount), safe_div($newmins, $ucount), safe_div($newrounds, $ucount),
           safe_div($newearn, $ucount), safe_div($newearn, $newrounds));
}
print "\n";

# top ten by earnings
print "                    - top by earnings -\n";
sum_users(sort { $userearn{$b} - $userearn{$a} } keys %userearn);

# top ten by rounds played
print "                  - top by rounds played -\n";
sum_users(sort { $userrounds{"versus"}{$b} - $userrounds{"versus"}{$a} }
          keys %{$userrounds{"versus"}});

# top ten by minutes online
print "                 - top by minutes online -\n";
sum_users(sort { $usertime{$b} - $usertime{$a} } keys %usertime);

# break down disconnect/logoff/leave stats
print "         vs. Tincans   vs. Humans    Tutorial\n";
sum_leavers("Discons", \%discons);
sum_leavers("Logoffs", \%logoffs);
sum_leavers("Leavers", \%leavers);
print "\n";

# break down games played by scenario
printf("Scenario         Rounds\n");
printf("%-15s  %6d\n", "(total)", safe_get("unrated", \%rounds) + safe_get("rated", \%rounds));
printf("%-15s  %6d\n", "(unrated)", safe_get("unrated", \%rounds));
printf("%-15s  %6d\n", "(rated)", safe_get("rated", \%rounds));
foreach $scen (sort { $byscen{$b} - $byscen{$a} } keys %byscen) {
    printf("%-15s  %6d\n", $scen, $byscen{$scen});
}
print "\n";

# break down games played by scenario
printf("Tutorial         Rounds\n");
foreach $scen (sort { $bytut{$b} - $bytut{$a} } keys %bytut) {
    printf("%-15s  %6d\n", $scen, $bytut{$scen});
}
print "\n";

# break down games played by team size
printf("Units            Rounds\n");
foreach $size (sort { $byteamsize{$b} - $byteamsize{$a} } keys %byteamsize) {
    printf("%-15d  %6d\n", $size, $byteamsize{$size});
}
print "\n";

sub sum_users {
    print "Username     Sess  Mins /sess  Rounds  Earn /round\n";
    my $idx = 0;
    foreach $user (@_) {
        next if ($user =~ /\(tin_can\)/);
        my $mins = safe_get($user, \%usertime) / 60;
        my $avgsess = safe_div($mins, safe_get($user, \%usersess));
        my $games = safe_get($user, $userrounds{"versus"});
        my $rgames = safe_get($user, $userrounds{"rated"});
        my $earn = safe_get($user, \%userearn);
        printf("%-12s %4d  %4.0f  %4.0f   %2d/%2d %5d   %3.0f\n",
               $user, safe_get($user, \%usersess), $mins, $avgsess,
               $games, $rgames, $earn, safe_div($earn, $games));
        last if (++$idx == $limit);
    }
    print "\n";
}

sub safe_get {
    my ($key, $hash) = @_;
    return defined $hash->{$key} ? $hash->{$key} : 0;
}

sub safe_div {
    my ($num, $denom) = @_;
    return ($denom != 0) ? $num/$denom : 0;
}

sub note_leaver {
    my ($hash, $humans, $tutorial) = @_;
    if ($tutorial) {
        $hash->{"tutorial"}++;
    } elsif ($humans > 1) {
        $hash->{"human"}++;
    } else {
        $hash->{"tincan"}++;
    }
}

sub sum_leavers {
    my ($what, $hash) = @_;
    my $cvalue = safe_get("tincan", $hash);
    my $crounds = safe_get("tincan", \%rounds);
    my $hvalue = safe_get("human", $hash);
    my $hrounds = safe_get("human", \%rounds);
    my $tvalue = safe_get("tutorial", $hash);
    my $trounds = safe_get("tutorial", \%rounds);
    printf("%s %4d (%4.1f%%) %4d (%4.1f%%) %4d (%4.1f%%)\n",
           $what,
           $cvalue, safe_div(100*$cvalue, $crounds),
           $hvalue, safe_div(100*$hvalue, $hrounds),
           $tvalue, safe_div(100*$tvalue, $trounds));
}
